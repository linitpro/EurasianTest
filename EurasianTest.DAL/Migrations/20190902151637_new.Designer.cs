// <auto-generated />
using System;
using EurasianTest.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace EurasianTest.DAL.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20190902151637_new")]
    partial class @new
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("EurasianTest.DAL.Entities.Implementations.Project", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime?>("Updated");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("EurasianTest.DAL.Entities.Implementations.ProjectAdministrator", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("ProjectId");

                    b.Property<DateTime?>("Updated");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectAdministrators");
                });

            modelBuilder.Entity("EurasianTest.DAL.Entities.Implementations.Task", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<long>("ProjectId");

                    b.Property<int>("Status");

                    b.Property<DateTime?>("Updated");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("EurasianTest.DAL.Entities.Implementations.TaskHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("NewStatus");

                    b.Property<long>("NewUserId");

                    b.Property<int>("OldStatus");

                    b.Property<long>("OldUserId");

                    b.Property<long>("TaskId");

                    b.Property<DateTime?>("Updated");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("NewUserId");

                    b.HasIndex("OldUserId");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("TaskHistories");
                });

            modelBuilder.Entity("EurasianTest.DAL.Entities.Implementations.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("Role");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<DateTime?>("Updated");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EurasianTest.DAL.Entities.Implementations.ProjectAdministrator", b =>
                {
                    b.HasOne("EurasianTest.DAL.Entities.Implementations.Project", "Project")
                        .WithMany("ProjectAdministrators")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EurasianTest.DAL.Entities.Implementations.User", "User")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EurasianTest.DAL.Entities.Implementations.Task", b =>
                {
                    b.HasOne("EurasianTest.DAL.Entities.Implementations.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EurasianTest.DAL.Entities.Implementations.TaskHistory", b =>
                {
                    b.HasOne("EurasianTest.DAL.Entities.Implementations.User", "NewUser")
                        .WithMany("RecievedHistory")
                        .HasForeignKey("NewUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EurasianTest.DAL.Entities.Implementations.User", "OldUser")
                        .WithMany("SendedHistory")
                        .HasForeignKey("OldUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EurasianTest.DAL.Entities.Implementations.Task", "Task")
                        .WithMany("History")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EurasianTest.DAL.Entities.Implementations.User", "User")
                        .WithMany("History")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
